my_score <- c(16,20,20,36)
max_score <- c(20,20,20,41)
weight <- c(20,20,20,40)
grade_achieved <- 100 * weighted.mean(my_score / max_score, weight)
grade_achieved
getwd()
dir()
x <- 2
attributes(x)
x
attributes()
attributes(x)
q()
x <- 4
class(x)
x <- c(4,"a",TRUE)
class(x)
x <- c("a","b","c")
seq_along(x)
rbinom(1, 1, 0.5)
cube <- function(x, n) {}
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10#
if(x > 5) {#
        x <- 0#
}
f <- function(x) {#
        g <- function(y) {#
                y + z#
        }#
        z <- 4#
        x + g(x)#
}
z <- 10
f(3)
x <- 5#
y <- if(x < 3) {#
        NA#
} else {#
        10#
}
y
h <- function(x, y = NULL, d = 3L) {#
        z <- cbind(x, d)#
        if(!is.null(y))#
                z <- z + y#
        else#
                z <- z + f#
        g <- x + y / z#
        if(d == 3L)#
                return(g)#
        g <- g + 10#
        g#
}
getwd()
setwd("/Users/ramaro/GIT/ProgrammingAssignment2/")
getwd()
c <- rbind(c(1, -1/4), c(-1/4, 1))
c
ic <- solve(c)
ic
ic <- solve(c) * c
ic
ic <- solve(c) %*% c
ic
library("MASS")
ic <- ginv(c)
ic
c <- rbind(c(1, -1), c(-1, 1))
c
ic <- solve(c)
ic <- ginv(c)
ic
ic <- solve(c)
det(c)
b <- rbind(c(3,6,3),c(5,2,1),c(1,2,1))
b
det(b)
solve(b)
ginv(b)
source(cachematrix.R)
source("cachematrix.R")
ma <- makeCacheMatrix(rbind(c(1, -1/4), c(-1/4, 1)))
ma
cacheSolve(ma)
cacheSolve(ma)
ma$get()
ma <- makeCacheMatrix(c)
cacheSolve(ma)
ma <- makeCacheMatrix(b)
cacheSolve(ma)
source(cachematrix.R)
source("cachematrix.R")
cacheSolve(ma)
ma <- makeCacheMatrix(rbind(c(1, -1/4), c(-1/4, 1)))
cacheSolve(ma)
ma <- makeCacheMatrix(c)
cacheSolve(ma)
